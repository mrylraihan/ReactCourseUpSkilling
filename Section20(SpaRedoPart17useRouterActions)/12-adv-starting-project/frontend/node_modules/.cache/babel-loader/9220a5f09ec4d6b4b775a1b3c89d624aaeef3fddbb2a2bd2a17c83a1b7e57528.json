{"ast":null,"code":"var _jsxFileName = \"/Volumes/External SSD/CodingSpace/ReactCourseUpSkilling/Section20(SpaRedoPart13SettingUpLoaders)/12-adv-starting-project/frontend/src/pages/EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData(); //useLoaderData will automatically do res.json() for us\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n  const events = data.events;\n  console.log(events);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport const loader = async () => {\n  // can use any js code and doc access like cookies and local storage but no hooks\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //...\n    return {\n      isError: true,\n      message: 'Could not fetch events.'\n    };\n    return {\n      isError: true,\n      message: 'Could not fetch events.'\n    };\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","console","log","_c","loader","response","fetch","ok","$RefreshReg$"],"sources":["/Volumes/External SSD/CodingSpace/ReactCourseUpSkilling/Section20(SpaRedoPart13SettingUpLoaders)/12-adv-starting-project/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData()//useLoaderData will automatically do res.json() for us\n  if(data.isError){\n    return <p>{data.message}</p>\n  }\nconst events = data.events\nconsole.log(events)\n  return (\n    <>\n       <EventsList events={events}/>\n    </>\n  );\n}\n\nexport default EventsPage;\n\nexport const loader = async () => {\n  // can use any js code and doc access like cookies and local storage but no hooks\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    //...\n    return {isError:true, message:'Could not fetch events.'}\n    return {isError:true, message:'Could not fetch events.'}\n  } else {\n  \n    return response;\n  }\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGR,aAAa,EAAE;EAC5B,IAAGQ,IAAI,CAACC,OAAO,EAAC;IACd,oBAAON,OAAA;MAAAO,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAC9B;EACF,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAC1BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACjB,oBACEb,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACGP,OAAA,CAACF,UAAU;MAACe,MAAM,EAAEA;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE,iBAC7B;AAEP;AAACR,EAAA,CAZQD,UAAU;EAAA,QACJN,aAAa;AAAA;AAAAmB,EAAA,GADnBb,UAAU;AAcnB,eAAeA,UAAU;AAEzB,OAAO,MAAMc,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,OAAO;MAACd,OAAO,EAAC,IAAI;MAAEE,OAAO,EAAC;IAAyB,CAAC;IACxD,OAAO;MAACF,OAAO,EAAC,IAAI;MAAEE,OAAO,EAAC;IAAyB,CAAC;EAC1D,CAAC,MAAM;IAEL,OAAOU,QAAQ;EACjB;AACF,CAAC;AAAA,IAAAF,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
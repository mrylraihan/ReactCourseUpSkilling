{"ast":null,"code":"// import {createStore} from 'redux'\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  toggle: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      // state.counter++ you can do this with redux ToolKit\n      return {\n        ...state,\n        counter: state.counter + 1\n      };\n    },\n    decrement(state) {\n      //state.counter--\n      return {\n        ...state,\n        counter: state.counter - 1\n      };\n    },\n    increase(state, action) {\n      // state.counter = state.counter + action.amount\n      // any value we pass in will be stored in a extra field called payload \n      return {\n        ...state,\n        counter: state.counter + action.payload\n      }; //this is because when i call the function i pass my data as a single value, .increase(10) if i passed in an object like increase({amount:10}), the i would access the amount key from the payload like action.payload.amount\n    },\n\n    toggleCounter(state) {\n      // state.toggle = !state.toggle\n      return {\n        ...state,\n        toggle: !state.toggle\n      };\n    }\n  }\n});\ncreateSlice({\n  name: 'authentication'\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","toggle","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"sources":["/Volumes/External SSD/CodingSpace/ReactCourseUpSkilling/Section18(ReduxBasicPart6IntroReduxToolKit)/01-starting-project/src/store/index.js"],"sourcesContent":["// import {createStore} from 'redux'\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\n\nconst initialCounterState = {counter:0, toggle:true}\n\nconst counterSlice = createSlice({\nname:'counter',\ninitialState: initialCounterState,\nreducers:{\n    increment(state){\n        // state.counter++ you can do this with redux ToolKit\n        return { ...state, counter: state.counter + 1 }\n    },\n    decrement(state){\n        //state.counter--\n        return { ...state, counter: state.counter - 1 }\n    },\n    increase(state, action){\n        // state.counter = state.counter + action.amount\n        // any value we pass in will be stored in a extra field called payload \n        return { ...state, counter: state.counter + action.payload }//this is because when i call the function i pass my data as a single value, .increase(10) if i passed in an object like increase({amount:10}), the i would access the amount key from the payload like action.payload.amount\n    },\n    toggleCounter(state){\n        // state.toggle = !state.toggle\n        return { ...state, toggle: !state.toggle }\n    }\n}\n})\n\n\ncreateSlice({\n    name:'authentication'\n})\n\nconst store = configureStore({reducer:{\n        counter:counterSlice.reducer\n    }})\n    \nexport const counterActions = counterSlice.actions \n\nexport default store\n"],"mappings":"AAAA;AACA,SAAQA,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,MAAM,EAAC;AAAI,CAAC;AAEpD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAC,SAAS;EACdC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAC;IACLC,SAASA,CAACC,KAAK,EAAC;MACZ;MACA,OAAO;QAAE,GAAGA,KAAK;QAAEP,OAAO,EAAEO,KAAK,CAACP,OAAO,GAAG;MAAE,CAAC;IACnD,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAC;MACZ;MACA,OAAO;QAAE,GAAGA,KAAK;QAAEP,OAAO,EAAEO,KAAK,CAACP,OAAO,GAAG;MAAE,CAAC;IACnD,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnB;MACA;MACA,OAAO;QAAE,GAAGH,KAAK;QAAEP,OAAO,EAAEO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC;MAAQ,CAAC;IAChE,CAAC;;IACDC,aAAaA,CAACL,KAAK,EAAC;MAChB;MACA,OAAO;QAAE,GAAGA,KAAK;QAAEN,MAAM,EAAE,CAACM,KAAK,CAACN;MAAO,CAAC;IAC9C;EACJ;AACA,CAAC,CAAC;AAGFJ,WAAW,CAAC;EACRM,IAAI,EAAC;AACT,CAAC,CAAC;AAEF,MAAMU,KAAK,GAAGf,cAAc,CAAC;EAACgB,OAAO,EAAC;IAC9Bd,OAAO,EAACE,YAAY,CAACY;EACzB;AAAC,CAAC,CAAC;AAEP,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAAO;AAElD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}
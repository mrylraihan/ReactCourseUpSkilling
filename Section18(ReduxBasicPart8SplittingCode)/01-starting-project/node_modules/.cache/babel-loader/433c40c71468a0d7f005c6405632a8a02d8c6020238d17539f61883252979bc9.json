{"ast":null,"code":"// import {createStore} from 'redux'\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// const initialCounterState = {counter:0, toggle:true}\n\n// const counterSlice = createSlice({\n// name:'counterSlice',\n// initialState: initialCounterState,\n// reducers:{\n//     increment(state){\n//         // state.counter++ you can do this with redux ToolKit\n//         return { ...state, counter: state.counter + 1 }\n//     },\n//     decrement(state){\n//         //state.counter--\n//         return { ...state, counter: state.counter - 1 }\n//     },\n//     increase(state, action){\n//         // state.counter = state.counter + action.amount\n//         // any value we pass in will be stored in a extra field called payload \n//         return { ...state, counter: state.counter + action.payload }//this is because when i call the function i pass my data as a single value, .increase(10) if i passed in an object like increase({amount:10}), the i would access the amount key from the payload like action.payload.amount\n//     },\n//     toggleCounter(state){\n//         // state.toggle = !state.toggle\n//         return { ...state, toggle: !state.toggle }\n//     }\n// }\n// })\nimport counterSlice from './counter';\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authenticationSlice',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      // state.isAuthenticated = true;\n      return {\n        ...state,\n        isAuthenticated: true\n      };\n    },\n    logout(state) {\n      // state.isAuthenticated = false;\n      return {\n        ...state,\n        isAuthenticated: false\n      };\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","counterSlice","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counter","auth","counterActions","actions","authActions"],"sources":["/Volumes/External SSD/CodingSpace/ReactCourseUpSkilling/Section18(ReduxBasicPart8SplittingCode)/01-starting-project/src/store/index.js"],"sourcesContent":["// import {createStore} from 'redux'\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\n\n// const initialCounterState = {counter:0, toggle:true}\n\n// const counterSlice = createSlice({\n// name:'counterSlice',\n// initialState: initialCounterState,\n// reducers:{\n//     increment(state){\n//         // state.counter++ you can do this with redux ToolKit\n//         return { ...state, counter: state.counter + 1 }\n//     },\n//     decrement(state){\n//         //state.counter--\n//         return { ...state, counter: state.counter - 1 }\n//     },\n//     increase(state, action){\n//         // state.counter = state.counter + action.amount\n//         // any value we pass in will be stored in a extra field called payload \n//         return { ...state, counter: state.counter + action.payload }//this is because when i call the function i pass my data as a single value, .increase(10) if i passed in an object like increase({amount:10}), the i would access the amount key from the payload like action.payload.amount\n//     },\n//     toggleCounter(state){\n//         // state.toggle = !state.toggle\n//         return { ...state, toggle: !state.toggle }\n//     }\n// }\n// })\nimport counterSlice from './counter'\nconst initialAuthState = {isAuthenticated:false}\nconst authSlice = createSlice({\n    name:'authenticationSlice',\n    initialState:initialAuthState,\n    reducers:{\n        login(state){\n            // state.isAuthenticated = true;\n            return {...state, isAuthenticated : true}\n        },\n        logout(state){\n            // state.isAuthenticated = false;\n            return { ...state, isAuthenticated: false }\n        }\n    }\n})\n\nconst store = configureStore({reducer:{\n        counter:counterSlice.reducer,\n    auth: authSlice.reducer,\n    }})\n    \n\nexport const counterActions = counterSlice.actions \nexport const authActions = authSlice.actions\nexport default store\n"],"mappings":"AAAA;AACA,SAAQA,WAAW,EAAEC,cAAc,QAAO,kBAAkB;;AAE5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOC,YAAY,MAAM,WAAW;AACpC,MAAMC,gBAAgB,GAAG;EAACC,eAAe,EAAC;AAAK,CAAC;AAChD,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC1BM,IAAI,EAAC,qBAAqB;EAC1BC,YAAY,EAACJ,gBAAgB;EAC7BK,QAAQ,EAAC;IACLC,KAAKA,CAACC,KAAK,EAAC;MACR;MACA,OAAO;QAAC,GAAGA,KAAK;QAAEN,eAAe,EAAG;MAAI,CAAC;IAC7C,CAAC;IACDO,MAAMA,CAACD,KAAK,EAAC;MACT;MACA,OAAO;QAAE,GAAGA,KAAK;QAAEN,eAAe,EAAE;MAAM,CAAC;IAC/C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMQ,KAAK,GAAGX,cAAc,CAAC;EAACY,OAAO,EAAC;IAC9BC,OAAO,EAACZ,YAAY,CAACW,OAAO;IAChCE,IAAI,EAAEV,SAAS,CAACQ;EAChB;AAAC,CAAC,CAAC;AAGP,OAAO,MAAMG,cAAc,GAAGd,YAAY,CAACe,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGb,SAAS,CAACY,OAAO;AAC5C,eAAeL,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}